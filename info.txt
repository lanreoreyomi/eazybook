CREATE DATABASE eazybooks;
CREATE USER eazybook_dbuser WITH PASSWORD 'eazybook_dbpassword';
\c postgres
GRANT ALL PRIVILEGES ON DATABASE eazybooks TO eazybook_dbuser;
GRANT CONNECT ON DATABASE eazybooks To eazybook_dbuser;
GRANT pg_read_all_data TO eazybook_dbuser;
GRANT pg_write_all_data TO eazybook_dbuser;
GRANT USAGE ON SCHEMA public TO eazybook_dbuser;
GRANT ALL ON SCHEMA public TO eazybook_dbuser;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public to eazybook_dbuser;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public to eazybook_dbuser;



------------------
sudo -u postgres psql
create user eazybook_dbuser;
create database eazybooks;
grant all priviledges on database eazybooks to eazybook_dbuser;
\c eazybooks
Create extension if not exists pg_trim with schema public;
\c postgres;
\password eazybook_dbuser


-----------------Buildind and pushing docker images

1. create a repo with the microservicename on docker hub
2. create a docker file at the rooot of the microservice
3. add the following in the file
    FROM openjdk:17
    ARG JAR_FILE=target/name-of-image-.jar
    COPY ${JAR_FILE} name-of-image-.jar
    ENTRYPOINT ["java","-jar","/name-of-image-.jar"]
4. cd into the microservice
   run docker build -t microservice .
  --this will  generate an image. yopu can list docker images to confirm
5. Tag and image with the follwinfg command
    docker tag name-of-image dockerusername/repo-name:version like this below
     docker tag authentication lanreoreyomi/authentication:v1.0

6. Push image
   docker push lanreoreyomi/authentication:v1.0

to start docker

docker-compose down # Stop and remove existing containers
docker-compose build # Rebuild the Nginx image (and frontend if needed)
docker-compose up -d # Start everything in detached mode